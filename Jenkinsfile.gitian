def targets = [
  'linux',
  'win',
  'osx',
]

def osslTarUrl = 'http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz'
def osslPatchUrl = 'https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch'
def SDK_URL='https://bitcoincore.org/depends-sources/sdks'
def OSX_SDK='10.11'
def proc = 4
def mem = 2000

def repositoryUrl = "https://github.com/dashpay/dash.git"
def commit = "develop"

def tasks = [:]
for(int i = 0; i < targets.size(); i++) {
  def target = targets[i]

  tasks["${target}"] = {
    node {
      def pwd = sh(returnStdout: true, script: 'pwd').trim()
      def dockerGid = sh(returnStdout: true, script: "stat -c '%g' /var/run/docker.sock").trim()
      stage("${target}/prepare") {
        dir('dash') {
          checkout scm
        }
        dir('gitian-builder') {
          git url: 'https://github.com/dashpay/gitian-builder.git'
        }
        sh "mkdir -p dashcore-binaries"
        if (target == "mac") {
          dir('gitian-builder') {
            sh 'mkdir -p inputs'
            sh "curl --location --fail $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -o inputs/MacOSX${OSX_SDK}.sdk.tar.gz"
          }
        }
      }

      def gitianImage
      stage("${target}/builder-image") {
        dir('dash') {
          gitianImage = docker.build("dash-gitian:${env.BUILD_ID}", 'ci -f ci/Dockerfile.gitian-builder')
        }
      }

      gitianImage.inside("--group-add ${dockerGid} -t -v \"/var/run/docker.sock:/var/run/docker.sock\"") {
        stage("${target}/download") {
          dir('gitian-builder') {
            sh "mkdir -p inputs"
            sh "cd inputs && curl -R -O ${osslPatchUrl}"
            sh "cd inputs && curl -R -O ${osslTarUrl}"
            sh "make -C ../dash/depends download SOURCES_PATH=`pwd`/cache/common"
          }
        }
        stage("${target}/base-vm") {
          dir('gitian-builder') {
            sh "./bin/make-base-vm --suite trusty --arch amd64 --docker"
            // make sure an old version is not running
            sh "docker rm -fv gitian-target || true"
          }
        }
        stage("${target}/gbuild") {
          dir('gitian-builder') {
            sh """
              tail -F var/install.log &
              tail -F var/build.log &
              USE_DOCKER=1 ./bin/gbuild -j ${proc} -m ${mem} --commit dash=${commit} --url dash=${repositoryUrl} ../dash/contrib/gitian-descriptors/gitian-${target}.yml
            """
            sh "mv build/out/src/dashcore-* ../dashcore-binaries/"
            stash includes: '**/build/out/dashcore-*', name: target
          }
        }
      }
    }
  }
}

try {
  parallel tasks
} finally {
  node {
    stage("archive") {
      for(int i = 0; i < targets.size(); i++) {
        try {
          unstash targets[i]
        } catch (Exception e) {
        }
      }
      archiveArtifacts artifacts: 'dashcore-binaries/*', fingerprint: true
    }
  }
}
